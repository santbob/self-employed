{"version":3,"sources":["components/Header.js","actions/types.js","components/BankTransactionForm.js","components/SharedProptypeShapes.js","utils/index.js","components/Pagination.js","components/DataTable.js","components/BankTransactions.js","actions/index.js","components/FinancialSummary.js","components/InvoiceForm.js","components/InvoicesList.js","App.js","reducers/invoices.js","reducers/bankTxns.js","reducers/index.js","testData/invoices.js","testData/bankTxns.js","testData/index.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","role","aria-label","href","ADD_INVOICE","EDIT_INVOICE","DELETE_INVOICE","ADD_BANK_TXN","EDIT_BANK_TXN","BankTransactionForm","PropTypes","shape","id","string","isRequired","invoiceId","description","amount","number","created","clientName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onFormSubmit","bind","assertThisInitialized","onCancel","handleInputChange","event","preventDefault","onSubmit","_this$state","onClose","invoices","target","value","type","checked","name","update","defineProperty","selectedIndex","setState","_this$state2","placeholder","onChange","key","map","inv","step","onClick","Component","randomString","length","Math","round","pow","random","toString","slice","printDate","timestamp","Date","toUTCString","split","join","getRandomInt","min","max","ceil","floor","printAmount","symbol","prefix","abs","toFixed","LEFT_PAGE","RIGHT_PAGE","range","from","to","arguments","undefined","i","push","Pagination","updateMembers","_this$props","_this$props$totalReco","totalRecords","_this$props$pageLimit","pageLimit","_this$props$pageNeigh","pageNeighbours","totalPages","gotoPage","page","_this$props$onPageCha","onPageChanged","f","currentPage","paginationData","handleClick","evt","handleMoveLeft","handleMoveRight","fetchPageNumbers","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","leftSpill","rightSpill","leftSpillPage","rightSpillPage","extraPages","concat","toConsumableArray","buildPaginationNumberButton","e","buildPaginationPrevorNextButton","isPrevious","aria-hidden","buildPaginationButton","_this2","console","log","react","index","TYPE_DATE","TYPE_MONEY","TYPE_TEXT","DataTable","pageIndex","rowsPerPage","buildColumnHtml","column","rowData","colIndex","rowIndex","columnContent","_column$type","tableKey","colCallback","Utils","clz","handleRowClick","tr","parentElement","rows","onRowClick","tagName","data","handleRowsPerPageChange","parseInt","_this$props2","columns","_this$props2$tableClz","tableClz","startIndex","endIndex","filteredRows","title","row","colSpan","opt","components_Pagination","BankTransactions","isModalOpen","onAddTxn","txn","addBankTxn","closeTxnModal","openTxnModal","ReactModal","setAppElement","bankTxns","components_DataTable","lib_default","overlayClassName","isOpen","onRequestClose","contentLabel","components_BankTransactionForm","connect","_ref","ACTION","FinancialSummary","balance","reduce","accumulator","epochNDaysBack","days","d","setHours","setMinutes","setSeconds","setDate","getDate","getTime","bankTxnsCountInPastNDays","count","thresh_clz","InvoiceForm","_this$props$invoice","invoice","_this$props$invoice$c","now","InvoicesList","selectedInvoice","handleInvoiceEdit","openInvoiceModal","onAddInvoice","addInvoice","updateInvoice","closeInvoiceModal","paidInvoicesMap","forEach","components_InvoiceForm","Home","components_Header","components_FinancialSummary","components_BankTransactions","components_InvoicesList","invoicesReducer","action","objectSpread","updated","filter","bankTxnsReducer","t","combineReducers","names","invoicesTestDataHelper","result","status","sort","b","bankTxnsTestDataHelper","getHours","generateTestData","Boolean","window","location","hostname","match","launchData","store","createStore","rootReducer","ReactDOM","render","es","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAuBeA,EApBA,kBACbC,EAAAC,EAAAC,cAAA,OACEC,UAAU,6BACVC,KAAK,aACLC,aAAW,mBAEXL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcG,KAAK,KAO9BN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,gFChBKI,EAAc,cACdC,EAAe,eACfC,EAAiB,iBAIjBC,EAAe,eACfC,EAAgB,4CC+HdC,GCrIaC,IAAUC,MAAM,CAC1CC,GAAIF,IAAUG,OAAOC,WACrBC,UAAWL,IAAUG,OAAOC,WAC5BE,YAAaN,IAAUG,OAAOC,WAC9BG,OAAQP,IAAUQ,OAAOJ,WACzBK,QAAST,IAAUQ,OAAOJ,aAGAJ,IAAUC,MAAM,CAC1CC,GAAIF,IAAUG,OAAOC,WACrBM,WAAYV,IAAUG,OAAOC,WAC7BG,OAAQP,IAAUQ,OAAOJ,WACzBK,QAAST,IAAUQ,OAAOJ,yBDT1B,SAAAL,EAAYY,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAhB,IACjBa,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAd,GAAAmB,KAAAH,KAAMJ,KAMRQ,MAAQ,CACNb,YAAa,GACbD,UAAW,GACXE,OAAQ,GARRK,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,SAAWX,EAAKW,SAASF,KAAdR,OAAAS,EAAA,EAAAT,CAAAD,IAChBA,EAAKY,kBAAoBZ,EAAKY,kBAAkBH,KAAvBR,OAAAS,EAAA,EAAAT,CAAAD,IAJRA,4EAcNa,GACXA,EAAMC,iBADY,IAEVC,EAAaZ,KAAKJ,MAAlBgB,SAFUC,EAGyBb,KAAKI,MAAxCb,EAHUsB,EAGVtB,YAAaD,EAHHuB,EAGGvB,UAAWE,EAHdqB,EAGcrB,OAE5BoB,GAAYrB,GAAeD,GAAaE,GAC1CoB,EAAS,CACPrB,cACAD,YACAE,OAAiB,IAATA,qCAKLkB,GACPA,EAAMC,iBADQ,IAENG,EAAYd,KAAKJ,MAAjBkB,QACJA,GACFA,8CAIcJ,GAAO,IACfK,EAAaf,KAAKJ,MAAlBmB,SACFC,EAASN,EAAMM,OACfC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DG,EAAOJ,EAAOI,KAEdC,EAAMvB,OAAAwB,EAAA,EAAAxB,CAAA,GACTsB,EAAOH,GAGG,cAATG,IACFC,EAAO7B,OAASuB,EAASC,EAAOO,cAAgB,GAAG/B,OAAS,KAE9DQ,KAAKwB,SAASH,oCAGP,IACCN,EAAaf,KAAKJ,MAAlBmB,SADDU,EAEoCzB,KAAKI,MAAxCb,EAFDkC,EAEClC,YAAaD,EAFdmC,EAEcnC,UAAWE,EAFzBiC,EAEyBjC,OAEhC,OACEpB,EAAAC,EAAAC,cAAA,QAAMsC,SAAUZ,KAAKK,aAAc9B,UAAU,WAC3CH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,0BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACE8C,KAAK,cACL7C,UAAU,QACV2C,KAAK,OACLQ,YAAY,uBACZT,MAAO1B,EACPoC,SAAU3B,KAAKS,sBAIrBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACE2C,MAAO3B,EACPqC,SAAU3B,KAAKS,kBACfW,KAAK,aAELhD,EAAAC,EAAAC,cAAA,UAAQsD,IAAI,IAAZ,mBACCb,GACCA,EAASc,IAAI,SAAAC,GAAG,OACd1D,EAAAC,EAAAC,cAAA,UAAQsD,IAAKE,EAAI3C,GAAI8B,MAAOa,EAAI3C,IAC7B2C,EAAInC,kBAOnBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACE8C,KAAK,SACL7C,UAAU,QACV2C,KAAK,SACLQ,YAAY,SACZT,MAAOzB,EACPuC,KAAK,OACLJ,SAAU3B,KAAKS,sBAKrBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoB2C,KAAK,UAA3C,WAIF9C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkByD,QAAShC,KAAKQ,UAAlD,oBAnHsByB,cEJ3B,SAASC,EAAaC,GAC3B,OAAOC,KAAKC,MACVD,KAAKE,IAAI,GAAIH,EAAS,GAAKC,KAAKG,SAAWH,KAAKE,IAAI,GAAIH,IAEvDK,SAAS,IACTC,MAAM,GAGJ,SAASC,EAAUC,GAExB,OADU,IAAIC,KAAKD,GAEhBE,cACAC,MAAM,KACNL,MAAM,EAAG,GACTM,KAAK,KAGH,SAASC,EAAaC,EAAKC,GAGhC,OAFAD,EAAMb,KAAKe,KAAKF,GAChBC,EAAMd,KAAKgB,MAAMF,GACVd,KAAKgB,MAAMhB,KAAKG,UAAYW,EAAMD,IAAQA,EAG5C,SAASI,EAAY7D,EAAQ8D,GAClC,IAAMC,EAASD,GAAU,IAEzB,OADA9D,GAAkB,KACL,EACJ,IAAM+D,EAASnB,KAAKoB,IAAIhE,GAAQiE,QAAQ,GAE1CF,EAAS/D,EAAOiE,QAAQ,cC1B3BC,EAAY,OACZC,EAAa,QAEbC,EAAQ,SAACC,EAAMC,GAInB,IAJoC,IAAb/B,EAAagC,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAN,EAC1BE,EAAIJ,EACFD,EAAQ,GAEPK,GAAKH,GACVF,EAAMM,KAAKD,GACXA,GAAKlC,EAGP,OAAO6B,GAiLMO,cA1Kb,SAAAA,EAAYvE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACjBtE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMJ,KASRwE,cAAgB,WAAM,IAAAC,EAKhBxE,EAAKD,MALW0E,EAAAD,EAElBE,oBAFkB,IAAAD,EAEH,KAFGA,EAAAE,EAAAH,EAGlBI,iBAHkB,IAAAD,EAGN,GAHMA,EAAAE,EAAAL,EAIlBM,sBAJkB,IAAAD,EAID,EAJCA,EAOpB7E,EAAK4E,UAAiC,kBAAdA,EAAyBA,EAAY,GAC7D5E,EAAK0E,aAAuC,kBAAjBA,EAA4BA,EAAe,EAEtE1E,EAAK8E,eACuB,kBAAnBA,EACHvC,KAAKc,IAAI,EAAGd,KAAKa,IAAI0B,EAAgB,IACrC,EAEN9E,EAAK+E,WAAaxC,KAAKe,KAAKtD,EAAK0E,aAAe1E,EAAK4E,YAzBpC5E,EA4BnBgF,SAAW,SAAAC,GAAQ,IAAAC,EACkBlF,EAAKD,MAAhCoF,qBADS,IAAAD,EACO,SAAAE,GAAC,OAAIA,GADZF,EAGXG,EAAc9C,KAAKc,IAAI,EAAGd,KAAKa,IAAI6B,EAAMjF,EAAK+E,aAE9CO,EAAiB,CACrBD,cACAN,WAAY/E,EAAK+E,WACjBH,UAAW5E,EAAK4E,UAChBF,aAAc1E,EAAK0E,cAGrB1E,EAAK2B,SAAS,CAAE0D,eAAe,kBAAMF,EAAcG,MAxClCtF,EA2CnBuF,YAAc,SAACN,EAAMO,GACnBA,EAAI1E,iBACJd,EAAKgF,SAASC,IA7CGjF,EAgDnByF,eAAiB,SAAAD,GACfA,EAAI1E,iBACJd,EAAKgF,SAAShF,EAAKO,MAAM8E,YAAoC,EAAtBrF,EAAK8E,eAAqB,IAlDhD9E,EAqDnB0F,gBAAkB,SAAAF,GAChBA,EAAI1E,iBACJd,EAAKgF,SAAShF,EAAKO,MAAM8E,YAAoC,EAAtBrF,EAAK8E,eAAqB,IAvDhD9E,EA0DnB2F,iBAAmB,WACjB,IAAMZ,EAAa/E,EAAK+E,WAClBM,EAAcrF,EAAKO,MAAM8E,YACzBP,EAAiB9E,EAAK8E,eAEtBc,EAAqC,EAAtB5F,EAAK8E,eAAqB,EAG/C,GAAIC,EAFgBa,EAAe,EAEL,CAC5B,IAAIC,EAAQ,GAENC,EAAYT,EAAcP,EAC1BiB,EAAaV,EAAcP,EAC3BkB,EAAiBjB,EAAa,EAE9BkB,EAAYH,EAAY,EAAIA,EAAY,EACxCI,EAAUH,EAAaC,EAAiBD,EAAaC,EAKrDG,EAAoBP,GAH1BC,EAAQ9B,EAAMkC,EAAWC,IAEA5D,OAC6B,EAEhD8D,EAAYH,EAAY,EACxBI,EAAaH,EAAUF,EAEvBM,EAAgBzC,EAChB0C,EAAiBzC,EAEvB,GAAIsC,IAAcC,EAAY,CAC5B,IAAMG,EAAazC,EAAMkC,EAAYE,EAAmBF,EAAY,GACpEJ,EAAK,CAAIS,GAAJG,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAsBuG,GAAtBvG,OAAAyG,EAAA,EAAAzG,CAAqC4F,SACrC,IAAKO,GAAaC,EAAY,CACnC,IAAMG,EAAazC,EAAMmC,EAAU,EAAGA,EAAUC,GAChDN,EAAK,GAAAY,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAO4F,GAAP5F,OAAAyG,EAAA,EAAAzG,CAAiBuG,GAAjB,CAA6BD,SACzBH,GAAaC,IACtBR,EAAK,CAAIS,GAAJG,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAsB4F,GAAtB,CAA6BU,KAGpC,OAAQ,GAARE,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAc4F,GAAd,CAAqBd,IAGvB,OAAOhB,EAAM,EAAGgB,IApGC/E,EAuGnB2G,4BAA8B,SAAA1B,GAC5B,OACE1G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYyD,QAAS,SAAAyE,GAAC,OAAI5G,EAAKuF,YAAYN,EAAM2B,KAChE3B,IA1GYjF,EA8GnB6G,gCAAkC,SAAA5B,GAChC,IAAM6B,EAAa7B,IAASpB,EAC5B,OACEtF,EAAAC,EAAAC,cAAA,UACEC,UAAU,YACVE,aAAYkI,EAAa,WAAa,OACtC3E,QAAS2E,EAAa9G,EAAKyF,eAAiBzF,EAAK0F,iBAEjDnH,EAAAC,EAAAC,cAAA,QAAMsI,cAAY,QAAQD,EAAU,UAAe,UAAnD,KACAvI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWoI,EAAa,WAAa,UAvHxC9G,EA4HnBgH,sBAAwB,SAAA/B,GACtB,OAAIA,IAASpB,GAAaoB,IAASnB,EAC1B9D,EAAK6G,gCAAgC5B,GAErCjF,EAAK2G,4BAA4B1B,IA9H1CjF,EAAKuE,gBACLvE,EAAKO,MAAQ,CAAE8E,YAAa,GAHXrF,mFAOjBG,KAAK6E,SAAS,oCA6HP,IAAAiC,EAAA9G,KACP,IAAKA,KAAKuE,aAAc,OAAO,KAC/B,GAAwB,IAApBvE,KAAK4E,WAAkB,OAAO,KAClCmC,QAAQC,IAAI,qBACZhH,KAAKoE,gBAJE,IAKCc,EAAgBlF,KAAKI,MAArB8E,YACFQ,EAAQ1F,KAAKwF,mBAEnB,OACEpH,EAAAC,EAAAC,cAAC2I,EAAA,SAAD,KACE7I,EAAAC,EAAAC,cAAA,OAAKG,aAAW,cACdL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXmH,EAAM7D,IAAI,SAACiD,EAAMoC,GAChB,OACE9I,EAAAC,EAAAC,cAAA,MACEsD,IAAKsF,EACL3I,UAAS,YAAA+H,OACPpB,IAAgBJ,EAAO,UAAY,KAGpCgC,EAAKD,sBAAsB/B,gBAzJrB7C,aChBnBkF,EAAY,OACZC,EAAa,QACbC,EAAY,OAyJHC,6MAnJblH,MAAQ,CACNmH,UAAW,EACXC,YAAa,KAGfC,gBAAkB,SAACC,EAAQC,EAASC,EAAUC,GAAa,IAGrDC,EAHqDC,EAC5BL,EAArBxG,YADiD,IAAA6G,EAC1CV,EAD0CU,EAEjDC,EAAanI,EAAKD,MAAlBoI,SAER,GAAIN,EAAOO,YACTH,EAAgBJ,EAAOO,YAAYN,QAGnC,OADAG,EAAgBH,EAAQD,EAAO9F,KACvBV,GACN,KAAKiG,EACHW,EAAgBI,EAAgBJ,GAChC,MACF,KAAKV,EACHU,EAAgBI,EAAkBJ,GAMxC,OACE1J,EAAAC,EAAAC,cAAA,MACEsD,IAAG,GAAA0E,OAAK0B,EAAL,SAAA1B,OAAqBuB,EAArB,KAAAvB,OAAiCsB,GACpCrJ,UAAWmJ,EAAOS,KAEjBL,GAAiB,OAKxBM,eAAiB,SAAA1H,GACf,IAAM2H,EAAK3H,EAAMM,OAAOsH,cADAjE,EAEKxE,EAAKD,MAA1B2I,EAFgBlE,EAEhBkE,KAAMC,EAFUnE,EAEVmE,WACVH,GAAqB,OAAfA,EAAGI,SAAoBD,GAC/BA,EAAWD,EAAKF,EAAGR,SAAW,OAIlC7C,cAAgB,SAAA0D,GACQ7I,EAAKO,MAAnBmH,UACQ,IAAMmB,EAAKxD,aACzBrF,EAAK2B,SAAS,CAAE+F,UAAWmB,EAAKxD,YAAc,OAIlDyD,wBAA0B,SAAAjI,GACxB,IACMO,EADSP,EAAMM,OACAC,MACrBpB,EAAK2B,SAAS,CAAEgG,YAAaoB,SAAS3H,EAAO,+EAGtC,IAAA6F,EAAA9G,KAAA6I,EAC4C7I,KAAKJ,MAAhDkJ,EADDD,EACCC,QAASP,EADVM,EACUN,KADVQ,EAAAF,EACgBG,gBADhB,IAAAD,EAC2B,GAD3BA,EAC+Bf,EAD/Ba,EAC+Bb,SAD/BnH,EAE4Bb,KAAKI,MAAhCmH,EAFD1G,EAEC0G,UAAWC,EAFZ3G,EAEY2G,YACbyB,EAAa1B,EAAYC,EACzB0B,EAAW3B,EAAYC,EAAcA,EACrC2B,EAAeZ,EAAK9F,MAAMwG,EAAYC,GAC5C,OACE9K,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAWyK,GAChB5K,EAAAC,EAAAC,cAAA,UACGwK,EAAQjH,IAAI,SAAC6F,EAAQR,GAAT,OACX9I,EAAAC,EAAAC,cAAA,MACEsD,IAAKoG,EAAW,MAAQd,EACxB3I,UAAWmJ,EAAOS,IAAM,mBAEvBT,EAAO0B,WAKhBhL,EAAAC,EAAAC,cAAA,SAAO0D,QAAShC,KAAKoI,gBAClBe,EAAatH,IAAI,SAACwH,EAAKxB,GAAN,OAChBzJ,EAAAC,EAAAC,cAAA,MAAIsD,IAAKoG,EAAW,MAAQH,EAAU1I,GAAIkK,EAAIlK,IAC3C2J,EAAQjH,IAAI,SAAC6F,EAAQE,GAAT,OACXd,EAAKW,gBAAgBC,EAAQ2B,EAAKzB,EAAUC,SAKnDU,GAAQA,EAAKpG,OAAS,GACrB/D,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIgL,QAASR,EAAQ3G,QACnB/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBAAjB,iBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACE2C,MAAOuG,EACP7F,SAAU3B,KAAK2I,yBAEd,CAAC,EAAG,GAAI,GAAI,IAAI9G,IAAI,SAAA0H,GAAG,OACtBnL,EAAAC,EAAAC,cAAA,UAAQsD,IAAK2H,EAAKtI,MAAOsI,GACtBA,UAQfnL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,WAEUH,EAAAC,EAAAC,cAAA,SAAI2K,EAAa,GAF3B,MAEoC7K,EAAAC,EAAAC,cAAA,SAAI4K,GAFxC,MAEyD,IACvD9K,EAAAC,EAAAC,cAAA,SAAIiK,EAAKpG,SAEX/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACkL,EAAD,CACEjF,aAAcgE,EAAKpG,OACnBsC,UAAW+C,EACX7C,eAAgB,EAChBK,cAAehF,KAAKgF,6BAzHlB/C,aCHlBwH,cACJ,SAAAA,EAAY7J,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyJ,IACjB5J,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2J,GAAAtJ,KAAAH,KAAMJ,KAMRQ,MAAQ,CACNsJ,aAAa,GARI7J,EAqBnB8J,SAAW,SAAAC,IAETC,EADuBhK,EAAKD,MAApBiK,YACGD,GACX/J,EAAKiK,iBAtBLjK,EAAKkK,aAAelK,EAAKkK,aAAazJ,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKiK,cAAgBjK,EAAKiK,cAAcxJ,KAAnBR,OAAAS,EAAA,EAAAT,CAAAD,IACrBmK,IAAWC,cAAc,SAJRpK,8EAajBG,KAAKwB,SAAS,CAAEkI,aAAa,4CAI7B1J,KAAKwB,SAAS,CAAEkI,aAAa,qCAUtB,IAAArF,EAC6BrE,KAAKJ,MAAjCsK,EADD7F,EACC6F,SAAU/B,EADX9D,EACW8D,IAAKpH,EADhBsD,EACgBtD,SACf2I,EAAgB1J,KAAKI,MAArBsJ,YAsBR,OACEtL,EAAAC,EAAAC,cAAA,OAAKC,UAAW4J,GACd/J,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCAAd,oBAEEH,EAAAC,EAAAC,cAAA,QACEC,UAAU,yDACVyD,QAAShC,KAAK+J,cAFhB,4BAQJ3L,EAAAC,EAAAC,cAAC6L,EAAD,CACErB,QAlCU,CACd,CACEM,MAAO,OACPlI,KAAM,OACNU,IAAK,WAEP,CACEwH,MAAO,UACPxH,IAAK,aAEP,CACEwH,MAAO,cACPxH,IAAK,eAEP,CACEwH,MAAO,SACPlI,KAAM,QACNU,IAAK,WAkBH2G,KAAM2B,EACN1B,WAAYxI,KAAKwI,WACjBQ,SAAS,sBACThB,SAAS,WAEX5J,EAAAC,EAAAC,cAAC8L,EAAA/L,EAAD,CACEE,UAAU,QACV8L,iBAAiB,UACjBC,OAAQZ,EACRa,eAAgBvK,KAAK8J,cACrBU,aAAa,SAEZd,GACCtL,EAAAC,EAAAC,cAACmM,EAAD,CACE1J,SAAUA,EACVH,SAAUZ,KAAK2J,SACf7I,QAASd,KAAK8J,yBAnFG7H,aAuGhByI,kBAVf,SAAAC,GACE,MAAO,CAAET,SADsCS,EAAtBT,SACNnJ,SAD4B4J,EAAZ5J,WAYnC,CAAE8I,WC7FG,SAAoBD,GACzB,MAAO,CAAE1I,KAAM0J,EAAqBhB,SD0FvBc,CAGbjB,GE3GIoB,gOAEK,IACCX,EAAalK,KAAKJ,MAAlBsK,SAGFY,EAAUZ,EAASa,OAAO,SAACC,EAAapB,GAC5C,OAAOoB,EAAcpB,EAAIpK,QACxB,GAGGyL,ELaH,SAA+BC,GACpC,IAAMC,EAAI,IAAIvI,KAKd,OAJAuI,EAAEC,SAAS,GACXD,EAAEE,WAAW,GACbF,EAAEG,WAAW,GACbH,EAAEI,QAAQJ,EAAEK,UAAYN,GACjBC,EKnBkBjD,CAbZ,IAagDuD,UACrDC,EAA2BxB,EAASa,OAAO,SAACY,EAAO/B,GAIvD,OAHIA,EAAIlK,QAAUuL,IAChBU,GAAS,GAEJA,GACN,GAGGC,EACJd,EAtBoB,KAuBhB,aACAA,EAAU,EACV,YACA,aAEN,OACE1M,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,WAASC,UAAW,8BAAgCqN,GAClDxN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAS2J,EAAkB4C,IACxC1M,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,4BAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,WAASC,UAAU,sCACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASmN,GACtBtN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,6CAtCmB0D,aAwDhByI,kBAVf,SAAAC,GACE,MAAO,CAAE5J,SADsC4J,EAAtB5J,SACNmJ,SAD4BS,EAAZT,WAUtBQ,CAAyBG,GC4DzBgB,cArHb,SAAAA,EAAYjM,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6L,IACjBhM,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+L,GAAA1L,KAAAH,KAAMJ,KAORQ,MAAQ,CACNT,WAAY,GACZH,OAAQ,EACRL,GAAI,GACJO,QAAS,GAVTG,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,SAAWX,EAAKW,SAASF,KAAdR,OAAAS,EAAA,EAAAT,CAAAD,IAChBA,EAAKY,kBAAoBZ,EAAKY,kBAAkBH,KAAvBR,OAAAS,EAAA,EAAAT,CAAAD,IAJRA,mFAeC,IAAAiM,EACqC9L,KAAKJ,MAAMmM,QAA5DpM,EADYmM,EACZnM,WAAYH,EADAsM,EACAtM,OADAwM,EAAAF,EACQpM,eADR,IAAAsM,EACkBpJ,KAAKqJ,MADvBD,EAC8B7M,EAD9B2M,EAC8B3M,GAChDK,GAAkB,IAClBQ,KAAKwB,SAAS,CAAE7B,aAAYH,SAAQL,KAAIO,iDAI7BgB,GACXA,EAAMC,iBADY,IAEVC,EAAaZ,KAAKJ,MAAlBgB,SAFUC,EAG0Bb,KAAKI,MAAzCT,EAHUkB,EAGVlB,WAAYH,EAHFqB,EAGErB,OAAQL,EAHV0B,EAGU1B,GAAIO,EAHdmB,EAGcnB,QAE5BkB,GAAYjB,GAAcH,GAC5BoB,EAAS,CACPzB,KACAO,UACAC,aACAH,OAAiB,IAATA,qCAKLkB,GACPA,EAAMC,iBADQ,IAENG,EAAYd,KAAKJ,MAAjBkB,QACJA,GACFA,8CAKcJ,GAChB,IAAMM,EAASN,EAAMM,OACfC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DG,EAAOJ,EAAOI,KAEpBpB,KAAKwB,SAAL1B,OAAAwB,EAAA,EAAAxB,CAAA,GACGsB,EAAOH,qCAIH,IAAAQ,EACqCzB,KAAKI,MAAzCT,EADD8B,EACC9B,WAAYH,EADbiC,EACajC,OAAQE,EADrB+B,EACqB/B,QAASP,EAD9BsC,EAC8BtC,GACrC,OACEf,EAAAC,EAAAC,cAAA,QAAMsC,SAAUZ,KAAKK,aAAc9B,UAAU,WAC3CH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXY,EAAK,mBAAqB,kBAE7Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW2J,EAAgBxI,KAE5CtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACE8C,KAAK,aACL7C,UAAU,QACV2C,KAAK,OACLQ,YAAY,eACZT,MAAOtB,EACPgC,SAAU3B,KAAKS,sBAIrBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACE8C,KAAK,SACL7C,UAAU,QACV2C,KAAK,SACLQ,YAAY,SACZT,MAAOzB,EACPmC,SAAU3B,KAAKS,sBAKrBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoB2C,KAAK,UACxC/B,EAAK,eAAiB,gBAG3Bf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkByD,QAAShC,KAAKQ,UAAlD,oBAtGcyB,aCGpBiK,cACJ,SAAAA,EAAYtM,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkM,IACjBrM,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoM,GAAA/L,KAAAH,KAAMJ,KAMRQ,MAAQ,CACNsJ,aAAa,EACbyC,gBAAiB,MATAtM,EAYnBuM,kBAAoB,SAAAtK,GACdA,GACFjC,EAAKwM,iBAAiBvK,IAdPjC,EA0BnByM,aAAe,SAAAxK,GAAO,IAAAuC,EACkBxE,EAAKD,MAAnC2M,EADYlI,EACZkI,WAAYC,EADAnI,EACAmI,cAChB1K,GAAOA,EAAI3C,GACbqN,EAAc1K,GAEdyK,EAAWzK,GAEbjC,EAAK4M,qBA/BL5M,EAAKwM,iBAAmBxM,EAAKwM,iBAAiB/L,KAAtBR,OAAAS,EAAA,EAAAT,CAAAD,IACxBA,EAAK4M,kBAAoB5M,EAAK4M,kBAAkBnM,KAAvBR,OAAAS,EAAA,EAAAT,CAAAD,IACzBmK,IAAWC,cAAc,SAJRpK,gFAkBFiC,GACf9B,KAAKwB,SAAS,CAAEkI,aAAa,EAAMyC,gBAAiBrK,gDAIpD9B,KAAKwB,SAAS,CAAEkI,aAAa,EAAOyC,gBAAiB,wCAa9C,IAAAtD,EAC6B7I,KAAKJ,MAAjCmB,EADD8H,EACC9H,SAAUmJ,EADXrB,EACWqB,SAAU/B,EADrBU,EACqBV,IADrBtH,EAEkCb,KAAKI,MAAtCsJ,EAFD7I,EAEC6I,YAAayC,EAFdtL,EAEcsL,gBAEfO,EAAkB,GACxBxC,EAASyC,QAAQ,SAAA/C,GACV8C,EAAgB9C,EAAItK,WAGvBoN,EAAgB9C,EAAItK,YAAcsK,EAAIpK,OAFtCkN,EAAgB9C,EAAItK,WAAasK,EAAIpK,SAMzC,IAAMsJ,EAAU,CACd,CACEM,MAAO,OACPlI,KAAM,OACNU,IAAK,WAEP,CACEwH,MAAO,KACPxH,IAAK,MAEP,CACEwH,MAAO,cACPxH,IAAK,cAEP,CACEwH,MAAO,SACPlI,KAAM,QACNU,IAAK,UAEP,CACEwH,MAAO,SACPxH,IAAK,SACLqG,YAAa,SAAAoB,GACX,OAAOA,EAAI7J,SAAWkN,EAAgBrD,EAAIlK,IAAM,OAAS,YAE3DgJ,IAAK,sBAGT,OACE/J,EAAAC,EAAAC,cAAA,OAAKC,UAAW4J,GACd/J,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCAAd,WAEEH,EAAAC,EAAAC,cAAA,QACEC,UAAU,yDACVyD,QAAShC,KAAKqM,kBAFhB,oBAQJjO,EAAAC,EAAAC,cAAC6L,EAAD,CACErB,QAASA,EACTP,KAAMxH,EACNyH,WAAYxI,KAAKoM,kBACjBpD,SAAS,2BACThB,SAAS,QAEX5J,EAAAC,EAAAC,cAAC8L,EAAA/L,EAAD,CACEE,UAAU,QACV8L,iBAAiB,UACjBC,OAAQZ,EACRa,eAAgBvK,KAAKyM,kBACrBjC,aAAa,SAEZd,GACCtL,EAAAC,EAAAC,cAACsO,EAAD,CACEb,QAASI,EACTvL,SAAUZ,KAAKsM,aACfxL,QAASd,KAAKyM,6BA7GDxK,aAkIZyI,kBAXf,SAAAC,GACE,MAAO,CAAE5J,SADsC4J,EAAtB5J,SACNmJ,SAD4BS,EAAZT,WAanC,CAAEqC,WHzIG,SAAoBR,GACzB,MAAO,CAAE7K,KAAM0J,EAAoBmB,YGwIrBS,cHrIT,SAAuBT,GAC5B,MAAO,CAAE7K,KAAM0J,EAAqBmB,aGkIvBrB,CAGbwB,GCxHaW,EAhBF,kBACXzO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwO,EAAD,MACA1O,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAACyO,EAAD,OAGF3O,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAC0O,EAAD,CAAkB7E,IAAI,0BACtB/J,EAAAC,EAAAC,cAAC2O,EAAD,CAAc9E,IAAI,sCCeX+E,EA5BS,WAAwB,IAAvB9M,EAAuB2D,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAf,GAAIoJ,EAAWpJ,UAAA5B,OAAA,EAAA4B,UAAA,QAAAC,EACtC+H,EAAYoB,EAAZpB,QACR,OAAQoB,EAAOjM,MACb,KAAK0J,EACH,OACE,CACEzL,GAAE,KAAAmH,OAAO4B,EAAmB,KAC5BvI,WAAYoM,EAAQpM,WACpBD,QAASkD,KAAKqJ,MACdzM,OAAQoJ,SAASmD,EAAQvM,OAAQ,MALrC8G,OAAAxG,OAAAyG,EAAA,EAAAzG,CAOKM,IAEP,KAAKwK,EACH,OAAOxK,EAAMyB,IAAI,SAAAC,GACf,OAAOA,EAAI3C,KAAO4M,EAAQ5M,GAAnBW,OAAAsN,EAAA,EAAAtN,CAAA,GACEiM,GADFjM,OAAAsN,EAAA,EAAAtN,CAAA,GAEEgC,EAFF,CAEOuL,QAASzK,KAAKqJ,UAEhC,KAAKrB,EACH,OAAOxK,EAAMkN,OAAO,SAAAxL,GAClB,OAAOA,EAAI3C,KAAO4M,EAAQ5M,KAE9B,QACE,OAAOiB,ICDEmN,EAvBS,WAAwB,IAAvBnN,EAAuB2D,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAf,GAAIoJ,EAAWpJ,UAAA5B,OAAA,EAAA4B,UAAA,QAAAC,EACtC4F,EAAQuD,EAARvD,IACR,OAAQuD,EAAOjM,MACb,KAAK0J,EACH,OACE,CACEzL,GAAE,KAAAmH,OAAO4B,EAAmB,KAC5B3I,YAAaqK,EAAIrK,YACjBD,UAAWsK,EAAItK,UACfI,QAASkD,KAAKqJ,MACdzM,OAAQoJ,SAASgB,EAAIpK,OAAQ,MANjC8G,OAAAxG,OAAAyG,EAAA,EAAAzG,CAQKM,IAEP,KAAKwK,EACH,OAAOxK,EAAMyB,IAAI,SAAA2L,GACf,OAAOA,EAAErO,KAAOyK,EAAIzK,GAAbW,OAAAsN,EAAA,EAAAtN,CAAA,GAAuB8J,GAAQ4D,IAE1C,QACE,OAAOpN,IClBEqN,cAAgB,CAC7B1M,SAAUmM,EACVhD,SAAUqD,ICLRG,EAAQ,CACV,kBACA,iBACA,kBACA,mBACA,eACA,YACA,eACA,kBACA,iBACA,iBACA,eACA,eACA,cACA,iBACA,cACA,iBACA,mBACA,kBACA,aACA,gBAsBaC,EAnBgB,WAE7B,IADA,IAAIC,EAAS,GACJ3J,EAAI,EAAGA,EAAIyJ,EAAMvL,OAAQ8B,IAAK,CACrC,IAAInC,EAAM,CACR3C,GAAE,KAAAmH,OAAO4B,EAAmB,KAC5BvI,WAAY+N,EAAMzJ,GAClBzE,OAAQ0I,GAAoB,KAAM,MAClC2F,OAAQ,GAGN1C,EAAI,IAAIvI,KACZuI,EAAEI,QAAQJ,EAAEK,UAAYtD,EAAmB,EAAG,KAC9CpG,EAAIpC,QAAUyL,EAAEM,UAChBmC,EAAO1J,KAAKpC,GAGd,OAAO8L,EAAOE,KAAK,SAACzP,EAAG0P,GAAJ,OAAW1P,EAAEqB,QAAUqO,EAAErO,QAAU,GAAK,KCf9CsO,GAvBgB,SAASjN,GAEtC,IADA,IAAI6M,EAAS,GACJ3J,EAAI,EAAGA,EAAIlD,EAASoB,OAAS,EAAG8B,IAAK,CAC5C,IAAMnC,EAAMf,EAASkD,GACjB2F,EAAM,CACRzK,GAAE,KAAAmH,OAAO4B,EAAmB,KAC5B3I,YACEuC,EAAItC,QAAU,EAAd,sBAAA8G,OAC0BxE,EAAInC,YAD9B,aAAA2G,OAEiBxE,EAAInC,YACvBL,UAAWwC,EAAI3C,GACfK,OAAQsC,EAAItC,QAGV2L,EAAI,IAAIvI,KAAKd,EAAIpC,SACrByL,EAAEC,SAASD,EAAE8C,WAAa/F,EAAmB,EAAG,IAChD0B,EAAIlK,QAAUyL,EAAEM,UAChBmC,EAAO1J,KAAK0F,GAGd,OAAOgE,EAAOE,KAAK,SAACzP,EAAG0P,GAAJ,OAAW1P,EAAEqB,QAAUqO,EAAErO,QAAU,GAAK,KCV9CwO,GATU,WACvB,IAAMnN,EAAW4M,IAEjB,MAAO,CACL5M,WACAmJ,SAHe8D,GAAuBjN,WCOtBoN,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAIC,GAEJA,GAAaN,KAGb,IAAMO,GAAQC,YAAYC,EAAaH,IAEvCI,IAASC,OACPzQ,EAAAC,EAAAC,cAACwQ,EAAA,EAAD,CAAUL,MAAOA,IACfrQ,EAAAC,EAAAC,cAACyQ,EAAD,OAEFC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95858970.chunk.js","sourcesContent":["import React from 'react';\n\n//constructor the page header to be used in all pages.\nconst Header = () => (\n  <nav\n    className='navbar has-background-info'\n    role='navigation'\n    aria-label='main navigation'\n  >\n    <div className='navbar-brand'>\n      <a className='navbar-item' href='/'>\n        {/* <img\n          src='/self-employed-logo.png'\n          alt='Self Employed - A Financial App'\n          width='50'\n          height='50'\n        /> */}\n        <p className='title is-4 has-text-white'>Self Employed</p>\n      </a>\n    </div>\n  </nav>\n);\n\nexport default Header;\n","//invoice actions\nexport const ADD_INVOICE = 'ADD_INVOICE';\nexport const EDIT_INVOICE = 'EDIT_INVOICE';\nexport const DELETE_INVOICE = 'DELETE_INVOICE';\nexport const LIST_INVOICES = 'LIST_INVOICES';\n\n//bank transaction actions\nexport const ADD_BANK_TXN = 'ADD_BANK_TXN';\nexport const EDIT_BANK_TXN = 'EDIT_BANK_TXN';\nexport const LIST_BANK_TXNS = 'LIST_BANK_TXNS';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { InvoiceShape } from './SharedProptypeShapes';\n\nclass BankTransactionForm extends Component {\n  constructor(props) {\n    super(props);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n  // the form state\n  state = {\n    description: '',\n    invoiceId: '',\n    amount: 0\n  };\n\n  // event handler for form submission\n  onFormSubmit(event) {\n    event.preventDefault();\n    const { onSubmit } = this.props;\n    const { description, invoiceId, amount } = this.state;\n\n    if (onSubmit && description && invoiceId && amount) {\n      onSubmit({\n        description,\n        invoiceId,\n        amount: amount * 100\n      });\n    }\n  }\n  // event handler for cancel button click\n  onCancel(event) {\n    event.preventDefault();\n    const { onClose } = this.props;\n    if (onClose) {\n      onClose();\n    }\n  }\n  // manages the state of the input elements and keeps the state upto date.\n  handleInputChange(event) {\n    const { invoices } = this.props;\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    // read the name and updated value from the input element and create and update obj to update the state\n    const update = {\n      [name]: value\n    };\n    // when the changed field is invoiceId, fetch the invoice amount and update the amount value in the state to ease of use\n    if (name === 'invoiceId') {\n      update.amount = invoices[target.selectedIndex - 1].amount / 100;\n    }\n    this.setState(update);\n  }\n\n  render() {\n    const { invoices } = this.props;\n    const { description, invoiceId, amount } = this.state;\n\n    return (\n      <form onSubmit={this.onFormSubmit} className='section'>\n        <h3 className='title is-3'>Add a bank transaction</h3>\n        <div className='field'>\n          <label className='label'>Description</label>\n          <div className='control'>\n            <input\n              name='description'\n              className='input'\n              type='text'\n              placeholder='e.g Payment for work'\n              value={description}\n              onChange={this.handleInputChange}\n            />\n          </div>\n        </div>\n        <div className='field'>\n          <label className='label'>Invoice</label>\n          <div className='control'>\n            <div className='select'>\n              <select\n                value={invoiceId}\n                onChange={this.handleInputChange}\n                name='invoiceId'\n              >\n                <option key=''>Select a client</option>\n                {invoices &&\n                  invoices.map(inv => (\n                    <option key={inv.id} value={inv.id}>\n                      {inv.clientName}\n                    </option>\n                  ))}\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className='field'>\n          <label className='label'>Amount</label>\n          <div className='control'>\n            <input\n              name='amount'\n              className='input'\n              type='number'\n              placeholder='100.50'\n              value={amount}\n              step='0.50'\n              onChange={this.handleInputChange}\n            />\n          </div>\n        </div>\n\n        <div className='field is-grouped is-grouped-centered'>\n          <p className='control'>\n            <button className='button is-success' type='submit'>\n              Submit\n            </button>\n          </p>\n          <p className='control'>\n            <button className='button is-black' onClick={this.onCancel}>\n              Cancel\n            </button>\n          </p>\n        </div>\n      </form>\n    );\n  }\n}\n\nBankTransactionForm.propTypes = {\n  invoices: PropTypes.arrayOf(InvoiceShape).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};\n\nexport default BankTransactionForm;\n","import PropTypes from 'prop-types';\n\nexport const BankTxnShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  invoiceId: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  amount: PropTypes.number.isRequired,\n  created: PropTypes.number.isRequired\n});\n\nexport const InvoiceShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  clientName: PropTypes.string.isRequired,\n  amount: PropTypes.number.isRequired,\n  created: PropTypes.number.isRequired\n});\n","export function randomString(length) {\n  return Math.round(\n    Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)\n  )\n    .toString(36)\n    .slice(1);\n}\n\nexport function printDate(timestamp) {\n  const d = new Date(timestamp);\n  return d\n    .toUTCString()\n    .split(' ')\n    .slice(1, 4)\n    .join('/');\n}\n\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nexport function printAmount(amount, symbol) {\n  const prefix = symbol || '$';\n  amount = amount / 100;\n  if (amount < 0) {\n    return '-' + prefix + Math.abs(amount).toFixed(2);\n  }\n  return prefix + amount.toFixed(2);\n}\n\nexport function getDateNDaysFromToday(days) {\n  const d = new Date();\n  d.setHours(0);\n  d.setMinutes(0);\n  d.setSeconds(0);\n  d.setDate(d.getDate() - days);\n  return d;\n}\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\n/* Credit - https://scotch.io/tutorials/build-custom-pagination-with-react \n   Took the source from the there and modified it to my needs, had some bugs fixed it too.\n*/\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    this.updateMembers();\n    this.state = { currentPage: 1 };\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  updateMembers = () => {\n    const {\n      totalRecords = null,\n      pageLimit = 30,\n      pageNeighbours = 0\n    } = this.props;\n\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\n\n    this.pageNeighbours =\n      typeof pageNeighbours === 'number'\n        ? Math.max(0, Math.min(pageNeighbours, 2))\n        : 0;\n\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n  };\n\n  gotoPage = page => {\n    const { onPageChanged = f => f } = this.props;\n\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n\n    const paginationData = {\n      currentPage,\n      totalPages: this.totalPages,\n      pageLimit: this.pageLimit,\n      totalRecords: this.totalRecords\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  };\n\n  handleClick = (page, evt) => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  };\n\n  handleMoveLeft = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n  };\n\n  handleMoveRight = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n  };\n\n  fetchPageNumbers = () => {\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    const totalNumbers = this.pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      let pages = [];\n\n      const leftBound = currentPage - pageNeighbours;\n      const rightBound = currentPage + pageNeighbours;\n      const beforeLastPage = totalPages - 1;\n\n      const startPage = leftBound > 2 ? leftBound : 2;\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n\n      pages = range(startPage, endPage);\n\n      const pagesCount = pages.length;\n      const singleSpillOffset = totalNumbers - pagesCount - 1;\n\n      const leftSpill = startPage > 2;\n      const rightSpill = endPage < beforeLastPage;\n\n      const leftSpillPage = LEFT_PAGE;\n      const rightSpillPage = RIGHT_PAGE;\n\n      if (leftSpill && !rightSpill) {\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n        pages = [leftSpillPage, ...extraPages, ...pages];\n      } else if (!leftSpill && rightSpill) {\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n        pages = [...pages, ...extraPages, rightSpillPage];\n      } else if (leftSpill && rightSpill) {\n        pages = [leftSpillPage, ...pages, rightSpillPage];\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  };\n\n  buildPaginationNumberButton = page => {\n    return (\n      <button className='page-link' onClick={e => this.handleClick(page, e)}>\n        {page}\n      </button>\n    );\n  };\n  buildPaginationPrevorNextButton = page => {\n    const isPrevious = page === LEFT_PAGE;\n    return (\n      <button\n        className='page-link'\n        aria-label={isPrevious ? 'Previous' : 'Next'}\n        onClick={isPrevious ? this.handleMoveLeft : this.handleMoveRight}\n      >\n        <span aria-hidden='true'>{isPrevious ? `&laquo;` : '&raquo;'} </span>\n        <span className='sr-only'>{isPrevious ? 'Previous' : 'Next'}</span>\n      </button>\n    );\n  };\n\n  buildPaginationButton = page => {\n    if (page === LEFT_PAGE || page === RIGHT_PAGE) {\n      return this.buildPaginationPrevorNextButton(page);\n    } else {\n      return this.buildPaginationNumberButton(page);\n    }\n  };\n\n  render() {\n    if (!this.totalRecords) return null;\n    if (this.totalPages === 1) return null;\n    console.log('pagination render');\n    this.updateMembers();\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n\n    return (\n      <Fragment>\n        <nav aria-label='Pagination'>\n          <ul className='pagination'>\n            {pages.map((page, index) => {\n              return (\n                <li\n                  key={index}\n                  className={`page-item${\n                    currentPage === page ? ' active' : ''\n                  }`}\n                >\n                  {this.buildPaginationButton(page)}\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </Fragment>\n    );\n  }\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport * as Utils from '../utils';\nimport Pagination from './Pagination';\nimport PropTypes from 'prop-types';\n\nconst TYPE_DATE = 'date';\nconst TYPE_MONEY = 'money';\nconst TYPE_TEXT = 'text';\n//const TYPE_LINK = 'link';\n//const TYPE_IMAGE = 'image';\n\n// A configurable table component which construct a html table based on the column configuration and row data.\nclass DataTable extends Component {\n  state = {\n    pageIndex: 0,\n    rowsPerPage: 5\n  };\n\n  buildColumnHtml = (column, rowData, colIndex, rowIndex) => {\n    const { type = TYPE_TEXT } = column;\n    const { tableKey } = this.props;\n    let columnContent;\n    if (column.colCallback) {\n      columnContent = column.colCallback(rowData);\n    } else {\n      columnContent = rowData[column.key];\n      switch (type) {\n        case TYPE_DATE:\n          columnContent = Utils.printDate(columnContent);\n          break;\n        case TYPE_MONEY:\n          columnContent = Utils.printAmount(columnContent);\n          break;\n        default:\n          break;\n      }\n    }\n    return (\n      <td\n        key={`${tableKey}'_d_'${rowIndex}_${colIndex}`}\n        className={column.clz}\n      >\n        {columnContent || ''}\n      </td>\n    );\n  };\n\n  handleRowClick = event => {\n    const tr = event.target.parentElement;\n    const { rows, onRowClick } = this.props;\n    if (tr && tr.tagName === 'TR' && onRowClick) {\n      onRowClick(rows[tr.rowIndex - 1]);\n    }\n  };\n\n  onPageChanged = data => {\n    const { pageIndex } = this.state;\n    if (pageIndex + 1 !== data.currentPage) {\n      this.setState({ pageIndex: data.currentPage - 1 });\n    }\n  };\n\n  handleRowsPerPageChange = event => {\n    const target = event.target;\n    const value = target.value;\n    this.setState({ rowsPerPage: parseInt(value, 10) });\n  };\n\n  render() {\n    const { columns, rows, tableClz = '', tableKey } = this.props;\n    const { pageIndex, rowsPerPage } = this.state;\n    const startIndex = pageIndex * rowsPerPage;\n    const endIndex = pageIndex * rowsPerPage + rowsPerPage;\n    const filteredRows = rows.slice(startIndex, endIndex);\n    return (\n      <table className='table is-fullwidth is-striped'>\n        <thead className={tableClz}>\n          <tr>\n            {columns.map((column, index) => (\n              <th\n                key={tableKey + '_h_' + index}\n                className={column.clz + ' has-text-white'}\n              >\n                {column.title}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody onClick={this.handleRowClick}>\n          {filteredRows.map((row, rowIndex) => (\n            <tr key={tableKey + '_r_' + rowIndex} id={row.id}>\n              {columns.map((column, colIndex) =>\n                this.buildColumnHtml(column, row, colIndex, rowIndex)\n              )}\n            </tr>\n          ))}\n        </tbody>\n        {rows && rows.length > 0 && (\n          <tfoot>\n            <tr>\n              <td colSpan={columns.length}>\n                <div className='columns is-vcentered'>\n                  <div className='column'>\n                    <div className='field'>\n                      <div className='control is-flex'>\n                        <label className='horizontal-label'>\n                          Rows per page\n                        </label>\n                        <div className='select'>\n                          <select\n                            value={rowsPerPage}\n                            onChange={this.handleRowsPerPageChange}\n                          >\n                            {[5, 10, 15, 25].map(opt => (\n                              <option key={opt} value={opt}>\n                                {opt}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className='column'>\n                    {/* Showing 126 - 150 of 1858  */}\n                    Showing <b>{startIndex + 1}</b> - <b>{endIndex}</b> of{' '}\n                    <b>{rows.length}</b>\n                  </div>\n                  <div className='column'>\n                    <Pagination\n                      totalRecords={rows.length}\n                      pageLimit={rowsPerPage}\n                      pageNeighbours={1}\n                      onPageChanged={this.onPageChanged}\n                    />\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tfoot>\n        )}\n      </table>\n    );\n  }\n}\n\nDataTable.propTypes = {\n  rows: PropTypes.array.isRequired,\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      type: PropTypes.oneOf([TYPE_DATE, TYPE_MONEY, TYPE_TEXT]),\n      colCallback: PropTypes.func,\n      clz: PropTypes.string\n    })\n  ).isRequired,\n  tableKey: PropTypes.string.isRequired,\n  tableClz: PropTypes.string\n};\nexport default DataTable;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactModal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport { addBankTxn } from '../actions';\nimport BankTransactionForm from './BankTransactionForm';\nimport DataTable from './DataTable';\nimport { BankTxnShape, InvoiceShape } from './SharedProptypeShapes';\n\nclass BankTransactions extends Component {\n  constructor(props) {\n    super(props);\n    this.openTxnModal = this.openTxnModal.bind(this);\n    this.closeTxnModal = this.closeTxnModal.bind(this);\n    ReactModal.setAppElement('#root');\n  }\n\n  state = {\n    isModalOpen: false\n  };\n\n  // utility function to open the modal\n  openTxnModal() {\n    this.setState({ isModalOpen: true });\n  }\n  // utility function to close the modal\n  closeTxnModal() {\n    this.setState({ isModalOpen: false });\n  }\n\n  // this fn is called when the modal is submitted with txn details to create a bank transaction\n  onAddTxn = txn => {\n    const { addBankTxn } = this.props;\n    addBankTxn(txn);\n    this.closeTxnModal();\n  };\n\n  render() {\n    const { bankTxns, clz, invoices } = this.props;\n    const { isModalOpen } = this.state;\n\n    const columns = [\n      {\n        title: 'Date',\n        type: 'date',\n        key: 'created'\n      },\n      {\n        title: 'Invoice',\n        key: 'invoiceId'\n      },\n      {\n        title: 'Description',\n        key: 'description'\n      },\n      {\n        title: 'Amount',\n        type: 'money',\n        key: 'amount'\n      }\n    ];\n    return (\n      <div className={clz}>\n        <header className='has-background-grey'>\n          <h4 className='title is-4 has-text-white is-clearfix'>\n            Bank Transactions\n            <span\n              className='button is-link is-inverted is-pulled-right is-outlined'\n              onClick={this.openTxnModal}\n            >\n              Add a Bank Transaction\n            </span>\n          </h4>\n        </header>\n        <DataTable\n          columns={columns}\n          rows={bankTxns}\n          onRowClick={this.onRowClick}\n          tableClz='has-background-grey'\n          tableKey='bnkTxn'\n        />\n        <ReactModal\n          className='Modal'\n          overlayClassName='Overlay'\n          isOpen={isModalOpen}\n          onRequestClose={this.closeTxnModal}\n          contentLabel='Modal'\n        >\n          {isModalOpen && (\n            <BankTransactionForm\n              invoices={invoices}\n              onSubmit={this.onAddTxn}\n              onClose={this.closeTxnModal}\n            />\n          )}\n        </ReactModal>\n      </div>\n    );\n  }\n}\n\n// function used by connect below, will be called with redux state, take the required fields from the state and return them to be used as props by the component\nfunction mapStateToProps({ bankTxns, invoices }) {\n  return { bankTxns, invoices };\n}\n\nBankTransactions.propTypes = {\n  invoices: PropTypes.arrayOf(InvoiceShape).isRequired,\n  bankTxns: PropTypes.arrayOf(BankTxnShape).isRequired,\n  clz: PropTypes.string\n};\n//wrapping the BankTransactions components with React Redux connect with maps the state as props for the components\nexport default connect(\n  mapStateToProps,\n  { addBankTxn }\n)(BankTransactions);\n","import * as ACTION from './types';\n\n// Note - move related actions into its own file, if its becomes complex\n// invoices related actions\nexport function addInvoice(invoice) {\n  return { type: ACTION.ADD_INVOICE, invoice };\n}\n\nexport function updateInvoice(invoice) {\n  return { type: ACTION.EDIT_INVOICE, invoice };\n}\n\nexport function deleteInvoice(invoice) {\n  return { type: ACTION.DELETE_INVOICE, invoice };\n}\n\nexport function loadInvoices() {\n  return { type: ACTION.LIST_INVOICES };\n}\n\n// Bank txn related actions\nexport function addBankTxn(txn) {\n  return { type: ACTION.ADD_BANK_TXN, txn };\n}\n\nexport function updateBankTxn(txn) {\n  return { type: ACTION.EDIT_BANK_TXN, txn };\n}\n\nexport function loadBankTransactions() {\n  return { type: ACTION.LIST_BANK_TXNS };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { InvoiceShape, BankTxnShape } from './SharedProptypeShapes';\nimport * as Utils from '../utils';\n\nconst N_DAYS = 30;\nconst BALANCE_THRESHOLD = 15000;\nclass FinancialSummary extends Component {\n  componentDidMount() {}\n  render() {\n    const { bankTxns } = this.props;\n\n    //calculate the bank balance\n    const balance = bankTxns.reduce((accumulator, txn) => {\n      return accumulator + txn.amount;\n    }, 0);\n\n    //calculate the total invoices created within the last 30days.\n    const epochNDaysBack = Utils.getDateNDaysFromToday(N_DAYS).getTime();\n    const bankTxnsCountInPastNDays = bankTxns.reduce((count, txn) => {\n      if (txn.created > epochNDaysBack) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n\n    // Balance Threshold class\n    const thresh_clz =\n      balance > BALANCE_THRESHOLD\n        ? 'is-success'\n        : balance < 0\n        ? 'is-danger'\n        : 'is-warning';\n\n    return (\n      <div className='tile'>\n        <div className='tile is-parent'>\n          <article className={'tile is-child notification ' + thresh_clz}>\n            <p className='title'>{Utils.printAmount(balance)}</p>\n            <p className='subtitle'>Available bank balance</p>\n          </article>\n        </div>\n        <div className='tile is-parent'>\n          <article className='tile is-child notification is-info'>\n            <p className='title'>{bankTxnsCountInPastNDays}</p>\n            <p className='subtitle'>Bank transactions (Last 30days)</p>\n          </article>\n        </div>\n      </div>\n    );\n  }\n}\n// function used by connect below, will be called with redux state, take the required fields from the state and return them to be used as props by the component\nfunction mapStateToProps({ invoices, bankTxns }) {\n  return { invoices, bankTxns };\n}\n\nFinancialSummary.propTypes = {\n  invoices: PropTypes.arrayOf(InvoiceShape).isRequired,\n  bankTxns: PropTypes.arrayOf(BankTxnShape).isRequired,\n  clz: PropTypes.string\n};\n//wrapping the BankTransactions components with React Redux connect with maps the state as props for the components\nexport default connect(mapStateToProps)(FinancialSummary);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Utils from '../utils';\nimport { InvoiceShape } from './SharedProptypeShapes';\n\n// The component used to create or edit an invoice.\nclass InvoiceForm extends Component {\n  constructor(props) {\n    super(props);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  // the form state\n  state = {\n    clientName: '',\n    amount: 0,\n    id: '',\n    created: 0\n  };\n\n  componentDidMount() {\n    let { clientName, amount, created = Date.now(), id } = this.props.invoice;\n    amount = amount / 100;\n    this.setState({ clientName, amount, id, created });\n  }\n\n  // event handler for form submission, validates the input and call back the onSubmit fn props with the entered values\n  onFormSubmit(event) {\n    event.preventDefault();\n    const { onSubmit } = this.props;\n    const { clientName, amount, id, created } = this.state;\n\n    if (onSubmit && clientName && amount) {\n      onSubmit({\n        id,\n        created,\n        clientName,\n        amount: amount * 100 // convert to cents\n      });\n    }\n  }\n  // event handler for cancel button click\n  onCancel(event) {\n    event.preventDefault();\n    const { onClose } = this.props;\n    if (onClose) {\n      onClose();\n    }\n  }\n\n  // keep the state updated by listening for changes in the input elements\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const { clientName, amount, created, id } = this.state;\n    return (\n      <form onSubmit={this.onFormSubmit} className='section'>\n        <h3 className='title is-3'>\n          {id ? 'Edit the Invoice' : 'Add an Invoice'}\n        </h3>\n        <div className='field'>\n          <label className='label'>Invoice Date</label>\n          <div className='control'>{Utils.printDate(created)}</div>\n        </div>\n        <div className='field'>\n          <label className='label'>Client Name</label>\n          <div className='control'>\n            <input\n              name='clientName'\n              className='input'\n              type='text'\n              placeholder='e.g John Doe'\n              value={clientName}\n              onChange={this.handleInputChange}\n            />\n          </div>\n        </div>\n        <div className='field'>\n          <label className='label'>Amount</label>\n          <div className='control'>\n            <input\n              name='amount'\n              className='input'\n              type='number'\n              placeholder='100.50'\n              value={amount}\n              onChange={this.handleInputChange}\n            />\n          </div>\n        </div>\n\n        <div className='field is-grouped is-grouped-centered'>\n          <p className='control'>\n            <button className='button is-success' type='submit'>\n              {id ? 'Edit Invoice' : 'Add Invoice'}\n            </button>\n          </p>\n          <p className='control'>\n            <button className='button is-black' onClick={this.onCancel}>\n              Cancel\n            </button>\n          </p>\n        </div>\n      </form>\n    );\n  }\n}\n\nInvoiceForm.propTypes = {\n  invoice: InvoiceShape,\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};\n\nexport default InvoiceForm;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactModal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport InvoiceForm from './InvoiceForm';\nimport { addInvoice, updateInvoice } from '../actions';\nimport DataTable from './DataTable';\nimport { InvoiceShape, BankTxnShape } from './SharedProptypeShapes';\n\nclass InvoicesList extends Component {\n  constructor(props) {\n    super(props);\n    this.openInvoiceModal = this.openInvoiceModal.bind(this);\n    this.closeInvoiceModal = this.closeInvoiceModal.bind(this);\n    ReactModal.setAppElement('#root');\n  }\n\n  state = {\n    isModalOpen: false,\n    selectedInvoice: null\n  };\n\n  handleInvoiceEdit = inv => {\n    if (inv) {\n      this.openInvoiceModal(inv);\n    }\n  };\n\n  openInvoiceModal(inv) {\n    this.setState({ isModalOpen: true, selectedInvoice: inv });\n  }\n\n  closeInvoiceModal() {\n    this.setState({ isModalOpen: false, selectedInvoice: null });\n  }\n\n  onAddInvoice = inv => {\n    const { addInvoice, updateInvoice } = this.props;\n    if (inv && inv.id) {\n      updateInvoice(inv);\n    } else {\n      addInvoice(inv);\n    }\n    this.closeInvoiceModal();\n  };\n\n  render() {\n    const { invoices, bankTxns, clz } = this.props;\n    const { isModalOpen, selectedInvoice } = this.state;\n\n    const paidInvoicesMap = {};\n    bankTxns.forEach(txn => {\n      if (!paidInvoicesMap[txn.invoiceId]) {\n        paidInvoicesMap[txn.invoiceId] = txn.amount;\n      } else {\n        paidInvoicesMap[txn.invoiceId] += txn.amount;\n      }\n    });\n    // column configuration for the DataTable\n    const columns = [\n      {\n        title: 'Date',\n        type: 'date',\n        key: 'created'\n      },\n      {\n        title: 'Id',\n        key: 'id'\n      },\n      {\n        title: 'Client Name',\n        key: 'clientName'\n      },\n      {\n        title: 'Amount',\n        type: 'money',\n        key: 'amount'\n      },\n      {\n        title: 'Status',\n        key: 'status',\n        colCallback: row => {\n          return row.amount === paidInvoicesMap[row.id] ? 'PAID' : 'NOT PAID';\n        },\n        clz: 'has-text-centered'\n      }\n    ];\n    return (\n      <div className={clz}>\n        <header className='has-background-grey-dark'>\n          <h4 className='title is-4 has-text-white is-clearfix'>\n            Invoices\n            <span\n              className='button is-link is-inverted is-pulled-right is-outlined'\n              onClick={this.openInvoiceModal}\n            >\n              Add an Invoice\n            </span>\n          </h4>\n        </header>\n        <DataTable\n          columns={columns}\n          rows={invoices}\n          onRowClick={this.handleInvoiceEdit}\n          tableClz='has-background-grey-dark'\n          tableKey='inv'\n        />\n        <ReactModal\n          className='Modal'\n          overlayClassName='Overlay'\n          isOpen={isModalOpen}\n          onRequestClose={this.closeInvoiceModal}\n          contentLabel='Modal'\n        >\n          {isModalOpen && (\n            <InvoiceForm\n              invoice={selectedInvoice}\n              onSubmit={this.onAddInvoice}\n              onClose={this.closeInvoiceModal}\n            />\n          )}\n        </ReactModal>\n      </div>\n    );\n  }\n}\n\n// function used by connect below, will be called with redux state, take the required fields from the state and return them to be used as props by the component\nfunction mapStateToProps({ invoices, bankTxns }) {\n  return { invoices, bankTxns };\n}\n\nInvoicesList.propTypes = {\n  invoices: PropTypes.arrayOf(InvoiceShape).isRequired,\n  bankTxns: PropTypes.arrayOf(BankTxnShape).isRequired,\n  clz: PropTypes.string\n};\n\n//wrapping the BankTransactions components with React Redux connect with maps the state as props for the components\nexport default connect(\n  mapStateToProps,\n  { addInvoice, updateInvoice }\n)(InvoicesList);\n","import React from 'react';\nimport Header from './components/Header';\nimport BankTransactions from './components/BankTransactions';\nimport FinancialSummary from './components/FinancialSummary';\nimport InvoicesList from './components/InvoicesList';\n\nconst Home = () => (\n  <div>\n    <Header />\n    <div className='container'>\n      <section className='section'>\n        <FinancialSummary />\n      </section>\n\n      <section className='columns'>\n        <BankTransactions clz='widget column is-half' />\n        <InvoicesList clz='widget column is-half' />\n      </section>\n    </div>\n  </div>\n);\n\nexport default Home;\n","import * as ACTION from '../actions/types';\nimport * as Utils from '../utils';\n\nconst invoicesReducer = (state = [], action) => {\n  const { invoice } = action;\n  switch (action.type) {\n    case ACTION.ADD_INVOICE:\n      return [\n        {\n          id: `i_${Utils.randomString(10)}`,\n          clientName: invoice.clientName,\n          created: Date.now(),\n          amount: parseInt(invoice.amount, 10)\n        },\n        ...state\n      ];\n    case ACTION.EDIT_INVOICE:\n      return state.map(inv => {\n        return inv.id === invoice.id\n          ? { ...invoice }\n          : { ...inv, updated: Date.now() };\n      });\n    case ACTION.DELETE_INVOICE:\n      return state.filter(inv => {\n        return inv.id !== invoice.id;\n      });\n    default:\n      return state;\n  }\n};\n\nexport default invoicesReducer;\n","import * as ACTION from '../actions/types';\nimport * as Utils from '../utils';\n\nconst bankTxnsReducer = (state = [], action) => {\n  const { txn } = action;\n  switch (action.type) {\n    case ACTION.ADD_BANK_TXN:\n      return [\n        {\n          id: `b_${Utils.randomString(10)}`,\n          description: txn.description,\n          invoiceId: txn.invoiceId,\n          created: Date.now(),\n          amount: parseInt(txn.amount, 10)\n        },\n        ...state\n      ];\n    case ACTION.EDIT_BANK_TXN:\n      return state.map(t => {\n        return t.id === txn.id ? { ...txn } : t;\n      });\n    default:\n      return state;\n  }\n};\n\nexport default bankTxnsReducer;\n","import { combineReducers } from 'redux';\nimport invoicesReducer from './invoices';\nimport bankTxnsReducer from './bankTxns';\n\nexport default combineReducers({\n  invoices: invoicesReducer,\n  bankTxns: bankTxnsReducer\n});\n","import * as Utils from '../utils';\nvar names = [\n  'Estell Rockhill',\n  'Eliz Wahlstrom',\n  'Nadia Kierstead',\n  'Brittny Bowersox',\n  'Keli Sobotka',\n  'Otha Eves',\n  'Orpha Kinsel',\n  'Aurora Sprinkle',\n  'Stewart Slavin',\n  'Jolie Garrison',\n  'Twila Reames',\n  'Billie Mikus',\n  'Peter Brunt',\n  'Marcell Luzier',\n  'Brad Becher',\n  'Dawn Siqueiros',\n  'Felton Esperanza',\n  'Larissa Riddles',\n  'Lavone Ton',\n  'Hiram Netzer'\n];\n\nconst invoicesTestDataHelper = function() {\n  var result = [];\n  for (let i = 0; i < names.length; i++) {\n    var inv = {\n      id: `i_${Utils.randomString(10)}`,\n      clientName: names[i],\n      amount: Utils.getRandomInt(-7500, 7500), // invoice amt will be between negative and positive 75 dollars to show case test cases\n      status: 0\n    };\n    //\n    var d = new Date();\n    d.setDate(d.getDate() - Utils.getRandomInt(0, 40)); // creation date can be upto 40 days in the past.\n    inv.created = d.getTime();\n    result.push(inv);\n  }\n  // sort by date in descending order\n  return result.sort((a, b) => (a.created < b.created ? 1 : -1));\n};\n\nexport default invoicesTestDataHelper;\n","import * as Utils from '../utils';\n\nconst bankTxnsTestDataHelper = function(invoices) {\n  var result = [];\n  for (let i = 0; i < invoices.length - 5; i++) {\n    const inv = invoices[i];\n    var txn = {\n      id: `b_${Utils.randomString(10)}`,\n      description:\n        inv.amount >= 0\n          ? `Invoice payment by ${inv.clientName}`\n          : `Refund to ${inv.clientName}`,\n      invoiceId: inv.id,\n      amount: inv.amount\n    };\n\n    var d = new Date(inv.created);\n    d.setHours(d.getHours() + Utils.getRandomInt(1, 2));\n    txn.created = d.getTime();\n    result.push(txn);\n  }\n  // sort by date in descending order\n  return result.sort((a, b) => (a.created < b.created ? 1 : -1));\n};\n\nexport default bankTxnsTestDataHelper;\n","import invoicesTestDataHelper from './invoices';\nimport bankTxnsTestDataHelper from './bankTxns';\n\nconst generateTestData = function() {\n  const invoices = invoicesTestDataHelper();\n  const bankTxns = bankTxnsTestDataHelper(invoices);\n  return {\n    invoices,\n    bankTxns\n  };\n};\n\nexport default generateTestData;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport rootReducer from './reducers';\nimport generateTestData from './testData';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nlet launchData = [];\n// comment this line to not load test data.\nlaunchData = generateTestData();\n//console.log(launchData);\n//creates the redux store with all routers connected\nconst store = createStore(rootReducer, launchData);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}